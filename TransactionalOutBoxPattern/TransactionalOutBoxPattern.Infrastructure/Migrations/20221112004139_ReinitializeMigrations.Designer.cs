// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TransactionalOutBoxPattern.Infrastructure.Persistence;

#nullable disable

namespace TransactionalOutBoxPattern.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221112004139_ReinitializeMigrations")]
    partial class ReinitializeMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TransactionalOutBoxPattern.Domain.Aggregates.DepartmentAggregate.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<decimal>("DepartmentTotalSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("total_salary");

                    b.Property<string>("DepartmentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_type");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Task", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("TransactionalOutBoxPattern.Infrastructure.IntegrationEventServices.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("EventId");

                    b.ToTable("outbox_message", (string)null);
                });

            modelBuilder.Entity("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.OwnsOne("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.DepartmentId", "DepartmentId", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("department_id");

                            b1.HasKey("EmployeeId");

                            b1.HasIndex("Id");

                            b1.ToTable("employee");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");

                            b1.HasOne("TransactionalOutBoxPattern.Domain.Aggregates.DepartmentAggregate.Department", null)
                                .WithMany()
                                .HasForeignKey("Id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsOne("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employee");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Salary", "Salary", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("salary_amount");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employee");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("DepartmentId")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Salary")
                        .IsRequired();
                });

            modelBuilder.Entity("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Task", b =>
                {
                    b.HasOne("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Employee", null)
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactionalOutBoxPattern.Domain.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
